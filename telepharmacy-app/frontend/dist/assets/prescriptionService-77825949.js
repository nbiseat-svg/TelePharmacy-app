import{a as c}from"./axios-edfcd65b.js";const d="/api/prescriptions",a=c.create({baseURL:d,headers:{"Content-Type":"application/json"}});a.interceptors.request.use(o=>{const t=localStorage.getItem("token");return t&&(o.headers.Authorization=`Bearer ${t}`),o});class l{static async createPrescription(t){var e,r;try{return(await a.post("/",t)).data}catch(s){throw new Error(((r=(e=s.response)==null?void 0:e.data)==null?void 0:r.message)||"Error creating prescription")}}static async getPatientPrescriptions(t){var e,r;try{return(await a.get(`/patient/${t}`)).data}catch(s){throw new Error(((r=(e=s.response)==null?void 0:e.data)==null?void 0:r.message)||"Error fetching prescriptions")}}static async getPharmacistPrescriptions(t){var e,r;try{return(await a.get(`/pharmacist/${t}`)).data}catch(s){throw new Error(((r=(e=s.response)==null?void 0:e.data)==null?void 0:r.message)||"Error fetching prescriptions")}}static async getPrescriptionById(t){var e,r;try{return(await a.get(`/${t}`)).data}catch(s){throw new Error(((r=(e=s.response)==null?void 0:e.data)==null?void 0:r.message)||"Error fetching prescription")}}static async updatePrescriptionStatus(t,e){var r,s;try{return(await a.put(`/${t}/status`,{status:e})).data}catch(n){throw new Error(((s=(r=n.response)==null?void 0:r.data)==null?void 0:s.message)||"Error updating prescription status")}}static async requestPrescriptionRefill(t){var e,r;try{return(await a.post(`/${t}/refill`)).data}catch(s){throw new Error(((r=(e=s.response)==null?void 0:e.data)==null?void 0:r.message)||"Error requesting refill")}}static async updateRefillRequestStatus(t,e,r,s){var n,i;try{return(await a.put(`/${t}/refill/${e}`,{status:r,pharmacistNotes:s})).data}catch(p){throw new Error(((i=(n=p.response)==null?void 0:n.data)==null?void 0:i.message)||"Error updating refill request")}}static async addPharmacistNotes(t,e){var r,s;try{return(await a.put(`/${t}/notes`,{pharmacistNotes:e})).data}catch(n){throw new Error(((s=(r=n.response)==null?void 0:r.data)==null?void 0:s.message)||"Error adding pharmacist notes")}}static async markPrescriptionPickedUp(t){var e,r;try{return(await a.put(`/${t}/pickup`)).data}catch(s){throw new Error(((r=(e=s.response)==null?void 0:e.data)==null?void 0:r.message)||"Error marking prescription as picked up")}}static formatPrescriptionDate(t){return new Date(t).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric"})}static formatPrescriptionDateTime(t){return new Date(t).toLocaleDateString("en-US",{year:"numeric",month:"long",day:"numeric",hour:"2-digit",minute:"2-digit"})}static getStatusDisplayText(t){return{pending:"Pending",approved:"Approved",rejected:"Rejected",filled:"Filled",expired:"Expired",completed:"Completed"}[t]||t}static getStatusClass(t){return{pending:"status-pending",approved:"status-approved",rejected:"status-rejected",filled:"status-filled",expired:"status-expired",completed:"status-completed"}[t]||"status-default"}static getRefillStatusDisplayText(t){return{pending:"Pending Review",approved:"Approved",rejected:"Rejected"}[t]||t}static getRefillStatusClass(t){return{pending:"status-pending",approved:"status-approved",rejected:"status-rejected"}[t]||"status-default"}static canRefill(t){return t.status==="filled"&&t.medications.some(e=>e.refills>0)&&(t.refillRequests.length===0||t.refillRequests.every(e=>e.status!=="pending"))}static getPriorityDisplayText(t){return{routine:"Routine",urgent:"Urgent",asap:"ASAP"}[t]||t}static getPriorityClass(t){return{routine:"priority-routine",urgent:"priority-urgent",asap:"priority-asap"}[t]||"priority-default"}}export{l as P};
